/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as vscode from "vscode";
import { Worker } from "worker_threads";

// Import the code generated by wit2ts
import { Types, timer } from "./timer";
import { HaltViewProvider } from "./HaltViewProvider";

export async function activate(
  context: vscode.ExtensionContext
): Promise<void> {
  // The channel for printing the result.
  const channel = vscode.window.createOutputChannel("Calculator");
  context.subscriptions.push(channel);

  // The channel for printing the log.
  const log = vscode.window.createOutputChannel("Calculator - Log", {
    log: true,
  });
  context.subscriptions.push(log);

  // The implementation of the log function that is called from WASM
  const service: timer.Imports.Promisified = {
    log: (msg: string) => {
      channel.appendLine(msg);
    },
  };

  // Load the Wasm module
  const filename = vscode.Uri.joinPath(
    context.extensionUri,
    "target",
    "wasm32-unknown-unknown",
    "debug",
    "timer.wasm"
  );

  const bits = await vscode.workspace.fs.readFile(filename);
  const module = await WebAssembly.compile(bits);

  const worker = new Worker(
    vscode.Uri.joinPath(context.extensionUri, "./out/worker.js").fsPath
  );

  const api = await timer._.bind(service, module, worker);

  // Register the Panel
  const viewProvider = new HaltViewProvider(context.extensionUri);

  context.subscriptions.push(
    vscode.commands.registerCommand("halt.show", async () => {
      viewProvider.show();

      channel.show();
      await api.start(1000);
    })
  );
}
